pipeline {
    agent any

    environment {
        PROJECT_NAME = 'damul'
        GIT_REPO = 'https://lab.ssafy.com/hanahyun1/damul'
        FRONTEND_DIR = 'damul-client'
        BACKEND_DIR = 'damul-server'
        BASE_PATH = "/home/ubuntu"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/${BRANCH_NAME}']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'gitlab_personal_token_auth',
                        url: 'https://lab.ssafy.com/hanahyun1/damul'
                    ]]
                ])
                echo "Checked out branch: ${BRANCH_NAME}"
            }
        }

        stage('Frontend Build') {
            when {
                expression {
                    def config = findBranchConfig("${BRANCH_NAME}")
                    return config != null && config.buildEnabled
                }
            }
            steps {
                dir('damul-client') {
                    script {
                        echo "Building frontend in directory: damul-client"
                        sh 'npm install'
                        sh 'npm run build'

                        // Package frontend artifacts if needed
                        sh 'mkdir -p ./dist'
                        sh 'cp -r build/* ./dist/ || cp -r dist/* ./dist/ || true'
                    }
                }
            }
        }

        stage('Backend Build') {
            when {
                expression {
                    def config = findBranchConfig("${BRANCH_NAME}")
                    return config != null && config.buildEnabled
                }
            }
            steps {
                dir('damul-server') {
                    script {
                        echo "Building backend in directory: damul-server"
                        // Check if it's Maven or Gradle project
                        if (fileExists('pom.xml')) {
                            sh 'mvn clean package -DskipTests'
                        } else if (fileExists('build.gradle') || fileExists('build.gradle.kts')) {
                            sh 'chmod +x ./gradlew || true'
                            sh './gradlew clean build -x test'
                        } else {
                            error "Neither pom.xml nor build.gradle found in backend directory"
                        }
                    }
                }
            }
        }

        stage('Test') {
            when {
                expression {
                    def config = findBranchConfig("${BRANCH_NAME}")
                    return config != null && config.testEnabled
                }
            }
            steps {
                dir('damul-server') {
                    script {
                        echo "Running tests in directory: damul-server"
                        // Check if it's Maven or Gradle project
                        if (fileExists('pom.xml')) {
                            sh 'mvn test'
                            junit '**/target/surefire-reports/*.xml'
                        } else if (fileExists('build.gradle') || fileExists('build.gradle.kts')) {
                            sh './gradlew test'
                            junit '**/build/test-results/test/*.xml'
                        } else {
                            error "Neither pom.xml nor build.gradle found in backend directory"
                        }
                    }
                }
            }
        }

        stage('Docker Build & Deploy') {
            when {
                expression {
                    def config = findBranchConfig("${BRANCH_NAME}")
                    return config != null && config.deployEnabled
                }
            }
            steps {
                script {
                    // Docker 명령어 플랫폼에 따라 다르게 실행
                    if (isUnix()) {
                        sh "docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml down"
                        sh 'docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml build'
                        sh 'docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml up -d'
                    } else {
                        bat 'docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml down'
                        bat 'docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml build'
                        bat 'docker-compose -f ${BASE_PATH}/${PROJECT_NAME}/docker-compose.yml up -d'
                    }
                }
            }
        }
    }

    post {
        
        success {
            echo "Pipeline for ${PROJECT_NAME} completed successfully!"
        }
        failure {
            echo "Pipeline for ${PROJECT_NAME} failed!"
        }
    }
}

def findBranchConfig(branchName) {
   echo "Finding configuration for branch: ${branchName}"

   if (branchName == null || branchName.trim() == '') {
       try {
           def gitBranch = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
           if (gitBranch != 'HEAD') {
               branchName = gitBranch
           } else {
               branchName = 'master'
           }
       } catch (Exception e) {
           branchName = 'master'
       }
   }

   def branchConfigs = [
       [branchName: 'master', buildEnabled: true, testEnabled: true, deployEnabled: true],
       [branchName: 'develop', buildEnabled: true, testEnabled: true, deployEnabled: true]
   ]

   def exactMatch = branchConfigs.find { it.branchName == branchName }
   if (exactMatch) {
       return exactMatch
   }

   if (branchName.startsWith('feature/')) {
       def featureConfig = branchConfigs.find { it.branchName == 'feature/*' }
       if (featureConfig) {
           return featureConfig
       }
   }

   if (branchName == 'main' || branchName == 'master' || branchName == 'develop') {
       def defaultConfig = [:]
       defaultConfig.branchName = branchName
       defaultConfig.buildEnabled = true
       defaultConfig.testEnabled = true
       defaultConfig.deployEnabled = branchName == 'main' || branchName == 'master'
       return defaultConfig
   }

   return null
}